import os


print("*****************************************************************************************************************")
print("*                                                                                                               *")
print("*                                         MAX7456 Character Memory Zip                                          *")
print("*                                                                                                               *")
print("*         This script use for remove black pixels, and zip each pixel data from 2 bits to 1 bit storage         *")
print("*****************************************************************************************************************")
print()
print()
print()

SRC_DIR = input("Enter font file(generated by MaxFontEditor) location for zip: ")
SRC_FILE_NAME = os.path.splitext(os.path.basename(SRC_DIR))[0]
print()
print()

origin_data = []
characters_to_remove = " " + "\n" + "}" + ";"

with open(SRC_DIR, "r") as fpUserFont:
    next(fpUserFont)

    eof_mark = True
    while eof_mark:
        line_str = fpUserFont.readline()
        if not line_str:
            eof_mark = False

        for character in characters_to_remove:  # Remove useless character
            line_str = line_str.replace(character, "")

        line_str = line_str.split(",")

        for index in range(len(line_str)):
            try:
                origin_data.append(int(line_str[index], base=16))
            except:
                pass

char_tmp = []
char_out = []

for char_loop in range(0, len(origin_data), 64):
    char_tmp = origin_data[char_loop : (char_loop + 54)]

    for byte_loop in range(0, 54, 2):
        tmp = 0

        for bit_loop in range(7, 3, -1):
            if char_tmp[byte_loop] & 0x80:
                tmp += 0x01 << bit_loop
            else:
                pass
            char_tmp[byte_loop] = char_tmp[byte_loop] << 2

        for bit_loop in range(3, -1, -1):
            if char_tmp[byte_loop + 1] & 0x80:
                tmp += 0x01 << bit_loop
            else:
                pass
            char_tmp[byte_loop + 1] = char_tmp[byte_loop + 1] << 2

        char_out.append(tmp)

ROOT_DIR = os.path.dirname(os.path.abspath(SRC_DIR))
DEST_FILE_DIR = ROOT_DIR + "\\" + SRC_FILE_NAME + "_zip.h"

with open(DEST_FILE_DIR, "w") as fpOutputFont:

    fpOutputFont.writelines(
        "#include \"max7456_character.h\"\n" 
        + "#include \"main.h\"\n"
        + "\n"
        + "#define FONT_MARK \".ARM.__at_\"\n"
        + "#define _TO_STRING(x) #x\n"
        + "#define _LINK_STRING(f1, f2) f1 _TO_STRING(f2)\n"
        + "\n"
        + "const static uint8_t characters_" + SRC_FILE_NAME + "[CHARACTERS_NUMBER][CHARACTER_BYTE_SIZE] __attribute__((section(_LINK_STRING(FONT_MARK, MAX7456_CHARACTER_MEMORY_ADDR)))) = {\n"
    )

    for char_loop in range(0, len(char_out), 27):
        fpOutputFont.write("    {")
        for byte_loop in range(27):
            if byte_loop < 26:
                fpOutputFont.write(
                    "0x{:02X}".format(char_out[char_loop + byte_loop]) + ", "
                )
            else:
                fpOutputFont.write(
                    "0x{:02X}".format(char_out[char_loop + byte_loop]) + ""
                )
        fpOutputFont.write("},\n")
    fpOutputFont.writelines("};")

print("Character Memory Data already been zip and output to: " + DEST_FILE_DIR)
print()
input("Press the <ENTER> key to continue...")
